{"version":3,"sources":["components/Header/twitter.svg","components/Header/instagram.svg","components/Header/github.svg","components/Home/book2.svg","components/Header/Header.js","components/Footer/Footer.js","components/Home/Home.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","target","rel","src","twLogo","alt","inLogo","gitLogo","type","React","Component","Footer","role","aria-label","Home","Portada","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,sSC2B5BC,E,iLAlBP,OACI,yBAAKC,UAAU,aACd,yBAAKA,UAAU,eAChB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,uBAAGC,KAAK,gCAAgCC,OAAO,SAASC,IAAI,uBAAsB,yBAAKH,UAAU,OAAOI,IAAKC,IAAQC,IAAI,aACzH,uBAAGL,KAAK,gDAAgDC,OAAO,SAASC,IAAI,uBAAsB,yBAAKH,UAAU,OAAOI,IAAKG,IAAQD,IAAI,eACzI,uBAAGL,KAAK,iCAAiCC,OAAO,SAASC,IAAI,uBAAsB,yBAAKH,UAAU,OAAOI,IAAKI,IAASF,IAAI,aAE7H,yBAAKN,UAAU,8BACf,uBAAGC,KAAK,sFAAqF,4BAAQQ,KAAK,SAAST,UAAU,gBAAhC,6B,GAZtFU,IAAMC,W,iBCOZC,G,uLATP,OACI,4BAAQZ,UAAU,sBAAlB,aAEc,0BAAMa,KAAK,MAAMC,aAAW,SAA5B,gBAFd,QAEgE,uBAAGb,KAAK,gCAAgCC,OAAO,SAASC,IAAI,uBAA5D,mB,GALvDO,IAAMC,YC4BZI,E,iLAtBP,OACI,6BACI,kBAAC,EAAD,MACA,yBAAKf,UAAU,QACf,yBAAKA,UAAU,OACf,yBAAKA,UAAU,sCACX,wBAAIA,UAAU,mBAAd,WACA,wBAAIA,UAAU,eAAd,kEACA,uBAAGC,KAAK,sFAAqF,4BAAQQ,KAAK,SAAST,UAAU,gBAAhC,uBAEjG,yBAAKA,UAAU,YACf,yBAAKA,UAAU,UAAUI,IAAKY,IAASV,IAAI,eAI3C,kBAAC,EAAD,W,GAjBGI,IAAMC,WCNLM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCANC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDiH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.90c8c9f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter.43449f1c.svg\";","module.exports = __webpack_public_path__ + \"static/media/instagram.7c6e51dc.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.5cff78e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/book2.1eb45a0b.svg\";","import React from 'react';\n\nimport \"../Header/header.css\"\nimport twLogo from '../Header/twitter.svg'\nimport inLogo from '../Header/instagram.svg';\nimport gitLogo from '../Header/github.svg'\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <div className=\"container\">\n             <div className=\"background\"></div> \n            <div className=\"row\">\n              <div className=\"col-md\">\n                <a href=\"https://twitter.com/MajoLedes\" target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"Item\" src={twLogo} alt=\"Twitter\"></img></a>\n                <a href=\"https://www.instagram.com/majoledes/?hl=es-la\" target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"Item\" src={inLogo} alt=\"Instagram\"></img></a>\n                <a href=\"https://github.com/majoledesma\" target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"Item\" src={gitLogo} alt=\"GitHub\"></img></a>\n              </div>\n              <div className=\"d-none d-md-block col-md-2\">\n              <a href=\"https://drive.google.com/file/d/1Fn43usif0WWG3uggKxN6JpmwhbCBAvj9/view?usp=sharing\"><button type=\"button\" className=\"btn btn-info\">Quiero el apunte!</button></a>\n              </div>\n            </div>\n          </div>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\nimport \"../Footer/footer.css\"\n\nclass Footer extends React.Component {\n    render() {\n        return ( \n            <footer className=\"footer text-center\">\n                \n                Hecho con <span role=\"img\" aria-label=\"heart\">♥️</span> por <a href=\"https://twitter.com/MajoLedes\" target=\"_blank\" rel=\"noopener noreferrer\">@MajoLedes</a>\n        </footer>\n        )\n    }\n}\n\nexport default Footer;","import React from 'react';\n\nimport \"../Home/home.css\";\nimport Header from '../Header/Header';\nimport Portada from '../Home/book2.svg';\nimport Footer from '../Footer/Footer';\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <div>\n                <Header />   \n                <div className=\"text\">\n                <div className=\"row\">\n                <div className=\"col text-left col-md-4 offset-md-2\">\n                    <h1 className=\"display-2 title\">ReactJS</h1>\n                    <h3 className=\"description\">Accedé a las notas de los conceptos principales de ReactJS!</h3>\n                    <a href=\"https://drive.google.com/file/d/1Fn43usif0WWG3uggKxN6JpmwhbCBAvj9/view?usp=sharing\"><button type=\"button\" className=\"btn btn-info\">Quiero el apunte!</button></a>\n                </div>\n                <div className=\"col-md-4\">\n                <img className=\"portada\" src={Portada} alt=\"Portada\"></img>\n                </div>    \n                </div>   \n                </div>\n                <Footer />\n            </div>\n            \n        );\n    }\n}\n\nexport default Home;","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Home from './components/Home/Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Home />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}